{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/home/anwesha/Desktop/screencast/components/Timer.js\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nvar minuteSeconds = 60;\nvar hourSeconds = 3600;\nvar daySeconds = 86400;\nvar timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nvar renderTime = function renderTime(dimension, time) {\n  return __jsx(\"div\", {\n    className: \"time-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"time\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, time), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, dimension));\n};\n\nvar getTimeSeconds = function getTimeSeconds(time) {\n  return minuteSeconds - time / 1000 | 0;\n};\n\nvar getTimeMinutes = function getTimeMinutes(time) {\n  return time % hourSeconds / minuteSeconds | 0;\n};\n\nvar getTimeHours = function getTimeHours(time) {\n  return time % daySeconds / hourSeconds | 0;\n};\n\nvar getTimeDays = function getTimeDays(time) {\n  return time / daySeconds | 0;\n};\n\nexport default function Timer() {\n  var stratTime = Date.now(); // use UNIX timestamp in seconds\n\n  var endTime = stratTime + 243248; // use UNIX timestamp in seconds\n\n  var remainingTime = endTime - stratTime;\n  var days = Math.ceil(remainingTime / daySeconds);\n  var daysDuration = days * daySeconds;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, remainingTime ? __jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, __jsx(CountdownCircleTimer, _extends({}, timerProps, {\n    colors: [[\"#7E2E84\"]],\n    duration: daysDuration,\n    initialRemainingTime: remainingTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), function (_ref) {\n    var elapsedTime = _ref.elapsedTime;\n    return renderTime(\"days\", getTimeDays(daysDuration - elapsedTime / 1000));\n  }), __jsx(CountdownCircleTimer, _extends({}, timerProps, {\n    colors: [[\"#D14081\"]],\n    duration: daySeconds,\n    initialRemainingTime: remainingTime % daySeconds,\n    onComplete: function onComplete(totalElapsedTime) {\n      return [remainingTime - totalElapsedTime > hourSeconds];\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), function (_ref2) {\n    var elapsedTime = _ref2.elapsedTime;\n    return renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime / 1000));\n  }), __jsx(CountdownCircleTimer, _extends({}, timerProps, {\n    colors: [[\"#EF798A\"]],\n    duration: hourSeconds,\n    initialRemainingTime: remainingTime % hourSeconds,\n    onComplete: function onComplete(totalElapsedTime) {\n      return [remainingTime - totalElapsedTime > minuteSeconds];\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), function (_ref3) {\n    var elapsedTime = _ref3.elapsedTime;\n    return renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime / 1000));\n  }), __jsx(CountdownCircleTimer, _extends({}, timerProps, {\n    colors: [[\"#218380\"]],\n    duration: minuteSeconds,\n    initialRemainingTime: remainingTime % minuteSeconds,\n    onComplete: function onComplete(totalElapsedTime) {\n      return [remainingTime - totalElapsedTime > 0];\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), function (_ref4) {\n    var elapsedTime = _ref4.elapsedTime;\n    return renderTime(\"seconds\", getTimeSeconds(elapsedTime));\n  })) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/home/anwesha/Desktop/screencast/components/Timer.js"],"names":["React","CountdownCircleTimer","minuteSeconds","hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","getTimeSeconds","getTimeMinutes","getTimeHours","getTimeDays","Timer","stratTime","Date","now","endTime","remainingTime","days","Math","ceil","daysDuration","elapsedTime","totalElapsedTime"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n      <div>{dimension}</div>\n    </div>\n  );\n};\n\nconst getTimeSeconds = time => (minuteSeconds - time / 1000) | 0;\nconst getTimeMinutes = time => ((time % hourSeconds) / minuteSeconds) | 0;\nconst getTimeHours = time => ((time % daySeconds) / hourSeconds) | 0;\nconst getTimeDays = time => (time / daySeconds) | 0;\n\nexport default function Timer() {\n  const stratTime = Date.now(); // use UNIX timestamp in seconds\n  const endTime = stratTime + 243248; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  return (\n    <div>\n        { remainingTime ?\n        (\n            <div className=\"App\">\n            <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#7E2E84\"]]}\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#D14081\"]]}\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > hourSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#EF798A\"]]}\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > minuteSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\n            \"minutes\",\n            getTimeMinutes(hourSeconds - elapsedTime / 1000)\n          )\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#218380\"]]}\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={totalElapsedTime => [remainingTime - totalElapsedTime > 0]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer>\n       </div>\n\n        )\n    :\n    (\n        <div></div>\n    )}\n    </div>\n      \n   \n  );\n}\n"]},"metadata":{},"sourceType":"module"}