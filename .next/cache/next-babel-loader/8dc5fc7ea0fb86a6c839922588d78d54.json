{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'firebase/messaging';\nimport firebase from 'firebase/app';\nimport localforage from 'localforage';\nvar firebaseCloudMessaging = {\n  //checking whether token is available in indexed DB\n  tokenInlocalforage: function tokenInlocalforage() {\n    return _regeneratorRuntime.async(function tokenInlocalforage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", localforage.getItem('fcm_token'));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  //initializing firebase app\n  init: function init() {\n    var messaging, tokenInLocalForage, status, fcm_token;\n    return _regeneratorRuntime.async(function init$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (firebase.apps.length) {\n              _context2.next = 26;\n              break;\n            }\n\n            firebase.initializeApp({\n              messagingSenderId: \"447447903811\"\n            });\n            _context2.prev = 2;\n            messaging = firebase.messaging();\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(this.tokenInlocalforage());\n\n          case 6:\n            tokenInLocalForage = _context2.sent;\n\n            if (!(tokenInLocalForage !== null)) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", tokenInLocalForage);\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(Notification.requestPermission());\n\n          case 11:\n            status = _context2.sent;\n\n            if (!(status && status === 'granted')) {\n              _context2.next = 20;\n              break;\n            }\n\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(messaging.getToken());\n\n          case 15:\n            fcm_token = _context2.sent;\n\n            if (!fcm_token) {\n              _context2.next = 20;\n              break;\n            }\n\n            //setting FCM token in indexed db using localforage\n            localforage.setItem('fcm_token', token);\n            console.log('fcm token', token); //return the FCM token after saving it\n\n            return _context2.abrupt(\"return\", token);\n\n          case 20:\n            _context2.next = 26;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.error(_context2.t0);\n            return _context2.abrupt(\"return\", null);\n\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this, [[2, 22]], Promise);\n  }\n};\nexport { firebaseCloudMessaging };","map":{"version":3,"sources":["/home/anwesha/Desktop/screencast/webPush.js"],"names":["firebase","localforage","firebaseCloudMessaging","tokenInlocalforage","getItem","init","apps","length","initializeApp","messagingSenderId","messaging","tokenInLocalForage","Notification","requestPermission","status","getToken","fcm_token","setItem","token","console","log","error"],"mappings":";AAAA,OAAO,oBAAP;AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,IAAMC,sBAAsB,GAAG;AAC/B;AACAC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CACbF,WAAW,CAACG,OAAZ,CAAoB,WAApB,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFW;AAK/B;AACAC,EAAAA,IAAI,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACDL,QAAQ,CAACM,IAAT,CAAcC,MADb;AAAA;AAAA;AAAA;;AAENP,YAAAA,QAAQ,CAACQ,aAAT,CAAuB;AACtBC,cAAAA,iBAAiB,EAAE;AADG,aAAvB;AAFM;AAMAC,YAAAA,SANA,GAMYV,QAAQ,CAACU,SAAT,EANZ;AAAA;AAAA,6CAO2B,KAAKP,kBAAL,EAP3B;;AAAA;AAOAQ,YAAAA,kBAPA;;AAAA,kBASFA,kBAAkB,KAAK,IATrB;AAAA;AAAA;AAAA;;AAAA,8CAUCA,kBAVD;;AAAA;AAAA;AAAA,6CAaeC,YAAY,CAACC,iBAAb,EAbf;;AAAA;AAaAC,YAAAA,MAbA;;AAAA,kBAcFA,MAAM,IAAIA,MAAM,KAAK,SAdnB;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAgBkBJ,SAAS,CAACK,QAAV,EAhBlB;;AAAA;AAgBAC,YAAAA,SAhBA;;AAAA,iBAiBFA,SAjBE;AAAA;AAAA;AAAA;;AAkBN;AACAf,YAAAA,WAAW,CAACgB,OAAZ,CAAoB,WAApB,EAAiCC,KAAjC;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB,EApBM,CAqBN;;AArBM,8CAsBCA,KAtBD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BNC,YAAAA,OAAO,CAACE,KAAR;AA1BM,8CA2BC,IA3BD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANyB,CAA/B;AAsCA,SAASnB,sBAAT","sourcesContent":["import 'firebase/messaging';\nimport firebase from 'firebase/app';\nimport localforage from 'localforage';\nconst firebaseCloudMessaging = {\n//checking whether token is available in indexed DB\ntokenInlocalforage: async () => {\nreturn localforage.getItem('fcm_token');\n},\n//initializing firebase app\ninit: async function () {\nif (!firebase.apps.length) {\nfirebase.initializeApp({\n messagingSenderId: \"447447903811\"\n});\ntry {\nconst messaging = firebase.messaging();\nconst tokenInLocalForage = await this.tokenInlocalforage();\n//if FCM token is already there just return the token\nif (tokenInLocalForage !== null) {\nreturn tokenInLocalForage;\n}\n//requesting notification permission from browser\nconst status = await Notification.requestPermission();\nif (status && status === 'granted') {\n//getting token from FCM\nconst fcm_token = await messaging.getToken();\nif (fcm_token) {\n//setting FCM token in indexed db using localforage\nlocalforage.setItem('fcm_token', token);\nconsole.log('fcm token', token);\n//return the FCM token after saving it\nreturn token;\n}\n}\n} catch (error) {\nconsole.error(error);\nreturn null;\n}\n}\n},\n};\nexport { firebaseCloudMessaging };"]},"metadata":{},"sourceType":"module"}