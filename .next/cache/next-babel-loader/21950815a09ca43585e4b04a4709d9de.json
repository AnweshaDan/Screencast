{"ast":null,"code":"/*import React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n      <div>{dimension}</div>\n    </div>\n  );\n};\n\nconst getTimeSeconds = time => (minuteSeconds - time / 1000) | 0;\nconst getTimeMinutes = time => ((time % hourSeconds) / minuteSeconds) | 0;\nconst getTimeHours = time => ((time % daySeconds) / hourSeconds) | 0;\nconst getTimeDays = time => (time / daySeconds) | 0;\n\nexport default function Timer() {\n  const stratTime = Date.now(); // use UNIX timestamp in seconds\n  const endTime = stratTime + 243248; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  return (\n    <div>\n        { remainingTime ?\n        (\n            <div className=\"App\">\n            <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#7E2E84\"]]}\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#D14081\"]]}\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > hourSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#EF798A\"]]}\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > minuteSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\n            \"minutes\",\n            getTimeMinutes(hourSeconds - elapsedTime / 1000)\n          )\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#218380\"]]}\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={totalElapsedTime => [remainingTime - totalElapsedTime > 0]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer>\n       </div>\n\n        )\n    :\n    (\n        <div></div>\n    )}\n    </div>\n      \n   \n  );\n}*/","map":{"version":3,"sources":["/home/anwesha/Desktop/screencast/components/Timer.js"],"names":[],"mappings":"AAAA","sourcesContent":["/*import React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n      <div>{dimension}</div>\n    </div>\n  );\n};\n\nconst getTimeSeconds = time => (minuteSeconds - time / 1000) | 0;\nconst getTimeMinutes = time => ((time % hourSeconds) / minuteSeconds) | 0;\nconst getTimeHours = time => ((time % daySeconds) / hourSeconds) | 0;\nconst getTimeDays = time => (time / daySeconds) | 0;\n\nexport default function Timer() {\n  const stratTime = Date.now(); // use UNIX timestamp in seconds\n  const endTime = stratTime + 243248; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  return (\n    <div>\n        { remainingTime ?\n        (\n            <div className=\"App\">\n            <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#7E2E84\"]]}\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#D14081\"]]}\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > hourSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#EF798A\"]]}\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > minuteSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\n            \"minutes\",\n            getTimeMinutes(hourSeconds - elapsedTime / 1000)\n          )\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#218380\"]]}\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={totalElapsedTime => [remainingTime - totalElapsedTime > 0]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer>\n       </div>\n\n        )\n    :\n    (\n        <div></div>\n    )}\n    </div>\n      \n   \n  );\n}*/\n"]},"metadata":{},"sourceType":"script"}