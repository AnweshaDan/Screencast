{"version":3,"file":"static/webpack/static/development/pages/index.js.8b2e209f3454d6d97921.hot-update.js","sources":["webpack:///./components/Timer.js","webpack:///./pages/index.js"],"sourcesContent":["/*import React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n      <div>{dimension}</div>\n    </div>\n  );\n};\n\nconst getTimeSeconds = time => (minuteSeconds - time / 1000) | 0;\nconst getTimeMinutes = time => ((time % hourSeconds) / minuteSeconds) | 0;\nconst getTimeHours = time => ((time % daySeconds) / hourSeconds) | 0;\nconst getTimeDays = time => (time / daySeconds) | 0;\n\nexport default function Timer() {\n  const stratTime = Date.now(); // use UNIX timestamp in seconds\n  const endTime = stratTime + 243248; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  return (\n    <div>\n        { remainingTime ?\n        (\n            <div className=\"App\">\n            <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#7E2E84\"]]}\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#D14081\"]]}\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > hourSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime / 1000))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#EF798A\"]]}\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={totalElapsedTime => [\n          remainingTime - totalElapsedTime > minuteSeconds\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\n            \"minutes\",\n            getTimeMinutes(hourSeconds - elapsedTime / 1000)\n          )\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={[[\"#218380\"]]}\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={totalElapsedTime => [remainingTime - totalElapsedTime > 0]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer>\n       </div>\n\n        )\n    :\n    (\n        <div></div>\n    )}\n    </div>\n      \n   \n  );\n}*/\n","import React, { useEffect,useState } from \"react\";\n\nimport Head from \"next/head\";\nimport Logo from \"../glug.png\";\n\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\n\nimport GoogleLog from \"../components/GoogleLog\";\nimport FbLog2 from \"../components/FbLog2\";\nimport Timer from \"../components/Timer\"\nimport Particles from \"react-particles-js\";\n\n\n\n\nfunction index() {\n  const [Stop, setStop] = useState(Date.now());\n  return (\n    <div>\n      <style jsx>{`\n        div {\n          text-align: center;\n          content-align: center;\n          margin: 0px auto;\n        }\n      `}</style>\n\n      <Particles\n        params={{\n          particles: {\n            number: {\n              value: 40,\n              density: {\n                enable: false,\n                value_area: 500,\n              },\n            },\n            color: {\n              value: [\"#cc0000\"],\n            },\n            line_linked: {\n              color: \"#aa0044\",\n              opacity: 1,\n            },\n          },\n        }}\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          top: 0,\n          left: 0,\n          position: \"fixed\",\n          index: \"-10\",\n        }}\n      />\n      <div>\n        <div>\n          <Head>\n            <meta charset=\"UTF-8\" />\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, initial-scale=1.0, shrink-to-fit:no\"\n            />\n            <title>Screencast </title>\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"question.css\" />\n          </Head>\n        </div>\n\n        <Navbar />\n        <Timer/>\n        \n\n        <div>\n          <div\n            className=\"sign\"\n            style={{\n              marginTop: \"140px\",\n              marginBottom: \"20px\",\n              fontFamily: \"'Russo One', sans-serif\",\n            }}\n          >\n            <span className=\"fast-flicker\">screen</span>cast{\" \"}\n            <span className=\"flicker\">2020 </span>\n          </div>\n          <div className=\"login-head\" style={{ marginBottom: \"60px\" }}>\n            <h1>Login to play </h1>\n          </div>\n        </div>\n\n        <GoogleLog />\n        <FbLog2 />\n      </div>\n      <div\n        style={{\n          marginRight: \"auto\",\n          marginLeft: \"auto\",\n          textAlign: \"center\",\n        }}\n      >\n        <img\n          src={Logo}\n          alt=\"logo\"\n          style={{\n            marginTop: \"90px\",\n            position: \"relative\",\n            float: \"bottom\",\n            height: \"50px\",\n            width: \"auto\",\n          }}\n        />\n      </div>\n      <Footer style={{ color: \"white\" }} />\n    </div>\n  );\n}\n\nexport default index;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAXA;AADA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}