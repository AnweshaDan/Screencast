{
  "_from": "react-f",
  "_id": "react-f@0.1.2",
  "_inBundle": false,
  "_integrity": "sha512-jWFM2zlBcL0qsF3Sb9ZEutxTrzZf+Nbud4nRC/PmD1QKgS2XDvo/mf7uc4auJzqddS+cv7d0h8etIO6F4MAivw==",
  "_location": "/react-f",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-f",
    "fetchSpec": "latest",
    "name": "react-f",
    "raw": "react-f",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-f/-/react-f-0.1.2.tgz",
  "_shasum": "0f0cf82aa212cdb00e565d53ce4c7f2a37b93473",
  "_spec": "react-f",
  "_where": "/home/anwesha/Desktop/screencast",
  "author": {
    "name": "Oliver Herrmann"
  },
  "bundleDependencies": false,
  "dependencies": {
    "prop-types": "^15.6.0"
  },
  "deprecated": false,
  "description": "Helper library for handling react forms with higher order components",
  "devDependencies": {
    "@types/prop-types": "15.5.6",
    "@types/react": "16.4.18",
    "@types/react-dom": "16.0.9",
    "html-webpack-plugin": "3.2.0",
    "react": "16.6.0",
    "react-dom": "16.6.0",
    "ts-loader": "5.2.2",
    "typescript": "3.1.3",
    "webpack": "4.23.1",
    "webpack-cli": "3.1.2",
    "webpack-dev-server": "3.7.2"
  },
  "keywords": [
    "form",
    "forms",
    "higher order component",
    "hoc",
    "react",
    "utility"
  ],
  "main": "lib/src/index.js",
  "name": "react-f",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">15.4.2"
  },
  "readme": "# react-f\n\nreact-f is a library to help you create and compose [higher-order-components](https://reactjs.org/docs/higher-order-components.html) in a sophisticated, though predictable manner.\n\nYou can use react-f to build your own general-purpose higher-order-components, compose and extend someone else's hoc's or use it's rudimental [form handling example hoc's](#Examples).\n\n## Installation\n\nTo install run\n\n```bash\nnpm install --save react-f\n```\n\nor\n\n```bash\nyarn add react-f\n```\n\nreact-f uses react as a peer dependency, so you also need to [install react](https://reactjs.org/docs/installation.html#installing-react).\n\n\n## Usage\n\nreact-f is written in Typescript and offers all benefits of it's static typing out of the box.\nFor the sake of simplicity the following examples will be in Javascript.\n\n### Providing values\n\nIn the most basic cases, a HOC will only provide (static) data to other component:\n\n```javascript\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { createHOC } from \"react-f\"\n\n/*\n * Creating a new HOC\n * for this example, let's assume we want to expose a custom set of translations to your react components.\n * we want to encapsulate the logic of managing those values and deciding which translation to use in our\n * hoc, so that our presentational components are clearly seperated from this concern\n */\nconst I18N = createHOC({\n    name: \"herrmanno/I18N\",\n    class: class extends React.Component {\n\n        i18n = {\n            en: { greeting: \"Hello\" },\n            de: { greeting: \"Hallo\" }\n        }\n\n        /*\n         * This is the only method our class has to implement.\n         * The return value of this function is the public API of our HOC\n         * and will be exposed to all using presentational components later\n         */\n        getChildProps() {\n            return {\n                i18n: this.i18n[navigator.language] || this.i18n.en\n            }\n        }\n    }\n})\n\n/**\n * Greeting is a presentational component.\n * It does not have a state or logic and does not know\n * how to receive the i18 prop that it desires\n */\nconst Greeting = (props) => (\n    /*\n     * You can also access the translations by extracting them from the props manually, like so:\n     * {[I18N.ID]: i18nprops} = props\n     * // i18nprops.i18n === {greeting: ...}\n     */\n    <span>{I18N.props(props).i18n.greeting} World</span>\n)\n\n/**\n * This is the 'dumb' greeting component wrapped in our HOC\n */\nconst I18NGreeting = I18N(/* here does hoc options go*/)(Greeting)\n\nReactDOM.render(<I18NGreeting />, document.body) // <span>Hello</span> or <span>Hallo</span>\n```\n\n### Managing state\n\nWe can extend this example a litte bite. Maybe we want the user to be able to switch the language.\nThis would be a good example of a HOC that is stateful, in order to keep the presentational component pure and simple.\n\n```javascript\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { createHOC } from \"react-f\"\n\n/*\n * Creating a new HOC\n * this HOC is stateful, meaning it has a state property, which may change over time by calling React's setState method.\n * Anytime its state updates it will (potentionally) rerender, which causes its children to get the updated HOC's API values.\n */\nconst I18N = createHOC({\n    name: \"herrmanno/I18N\",\n    class: class extends React.Component {\n\n        state = {\n            i18n: {\n                en: { greeting: \"Hello\" },\n                de: { greeting: \"Hallo\" }\n            },\n            lang: \"en\"\n        }\n\n        getChildProps() {\n            return {\n                i18n: this.state.i18n[this.state.lang],\n                setLanguage: (lang) => {\n                    this.setState({lang})\n                }\n            }\n        }\n    }\n})\n\n/**\n * The HOC can also be applied like a decorator.\n * Watch out to call it (!) when applying it this way,\n * I18N is a function which returns the *actual* wrapper function\n */\n@I18N()\nclass Greeter extends React.Component {\n    render() {\n        const { i18n, setLanguage } = I18N.props(this)\n        return <div>\n            <span>{i18n.greeting} World</span>\n            <select onChange={e => setLanguage(e.target.value)}>\n                <option value=\"en\">English</option>\n                <option value=\"de\">Deutsch</option>\n            </select>\n        </div>\n    }\n}\n\nReactDOM.render(<Greeter/>, document.body) // <span>Hello</span> or <span>Hallo</span>\n```\n\n## Examples\n\nSee [the examples](./example/index.html) for real-life samples of how you could build your own higher-order components or combine the build-in ones to create powerful forms.\n\n\n## The build-in HOCs\n\nThe main purpose of react-f is to help you build robust higher-order components with a consistent interface that fit your needs as close as possible. For this reason it's abilities are relative low level. One of its main goals is to give you all the tools you need to create powerful components while getting out of your way.\nThough, react-f ships a handful of prebuild components. You are free to use these components but keep in mind that they're primarily examples on how to use react-f.",
  "readmeFilename": "README.MD",
  "scripts": {
    "build": "npm run tsc && npm run webpack:prod",
    "prepublish": "npm run build",
    "tsc": "tsc",
    "webpack:dev": "NODE_ENV=development webpack --mode development",
    "webpack:example": "webpack-dev-server --config webpack.example.config.js --mode development",
    "webpack:prod": "NODE_ENV=production webpack --mode production"
  },
  "typings": "lib/src/index.d.ts",
  "unpkg": "dist/reactf.min.js",
  "version": "0.1.2"
}
