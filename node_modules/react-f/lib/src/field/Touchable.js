"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var createHOC_1 = require("../createHOC");
var Touchable_1 = require("../form/Touchable");
exports.default = createHOC_1.default({
    name: "Field/Touchable",
    contextTypes: Touchable_1.default.IDs,
    class: /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                touched: false
            };
            _this.touch = function () {
                var touchable = Touchable_1.default.props(_this);
                if (touchable) {
                    touchable.touch(_this.props.field);
                }
                else {
                    return _this.setState({ touched: true });
                }
            };
            _this.onBlur = function (e) {
                var touchable = Touchable_1.default.props(_this);
                if (touchable) {
                    touchable.touch(_this.props.field);
                }
                else {
                    _this.setState({ touched: true });
                }
            };
            return _this;
        }
        Object.defineProperty(class_1.prototype, "touched", {
            get: function () {
                var touchable = Touchable_1.default.props(this);
                if (touchable) {
                    return touchable.touched(this.props.field);
                }
                else {
                    return this.state.touched;
                }
            },
            enumerable: true,
            configurable: true
        });
        class_1.prototype.getChildProps = function () {
            return {
                touched: this.touched,
                touch: this.touch,
                onBlur: this.onBlur,
            };
        };
        return class_1;
    }(React.Component))
});
//# sourceMappingURL=Touchable.js.map