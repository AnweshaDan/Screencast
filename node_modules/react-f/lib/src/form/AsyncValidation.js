"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Objects = require("../Objects");
var createHOC_1 = require("../createHOC");
var Data_1 = require("./Data");
exports.default = createHOC_1.default({
    name: "Form/AsyncValidation",
    contextTypes: Data_1.default.IDs,
    defaultChildProps: {
        errors: {},
        valid: true,
        validating: false,
        isFieldValidating: function () { return false; },
        getFieldErrors: function () { return []; },
        setFieldErrors: function () { return void 0; },
        validateField: function () { return Promise.resolve(); },
        validateAll: function () { return Promise.resolve(); },
        setErrors: function () { return void 0; },
        onValidate: function () { return void 0; }
    },
    class: /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                asyncErrors: {},
                asyncValidating: {},
            };
            _this.validationFuncs = null;
            return _this;
        }
        class_1.prototype.getErrors = function (field) {
            if (field === void 0) { field = ""; }
            return Array.prototype.concat(Objects.get(this.state.asyncErrors, field)).filter(Boolean);
        };
        class_1.prototype.isValidating = function (field) {
            return field
                ? Objects.get(this.state.asyncValidating, field)
                : Objects.some(this.state.asyncValidating, Boolean);
        };
        class_1.prototype.validateField = function (field) {
            var _this = this;
            if (field === undefined || field === null)
                return Promise.reject("You must provide a valid field argument to method AsyncValidation#validateField");
            var _a = Data_1.default.props(this), data = _a.data, initialData = _a.initialData, getValue = _a.getValue, getInitialValue = _a.getInitialValue;
            var validator = this.validationFuncs && Objects.get(this.validationFuncs(data), field);
            var validationFunc = typeof validator === "function" && (function () { return validator({ value: getValue(field), initialValue: getInitialValue(field), data: data, initialData: initialData }); });
            if (typeof validationFunc !== "function")
                return Promise.resolve();
            return new Promise(function (resolve, reject) {
                Promise.resolve()
                    .then(function () { return _this.setState(function (state) { return (__assign({}, state, { asyncValidating: Objects.set(state.asyncValidating, field, true) })); }); })
                    .then(validationFunc)
                    .then(function () {
                    _this.setAsyncError(field, null);
                    resolve();
                })
                    .catch(function (e) {
                    _this.setAsyncError(field, e);
                    reject(e);
                })
                    .then(function () { return _this.setState(function (state) { return (__assign({}, state, { asyncValidating: Objects.set(state.asyncValidating, field, false) })); }); });
            });
        };
        class_1.prototype.validateAll = function () {
            var _this = this;
            var _a = Data_1.default.props(this), data = _a.data, getValue = _a.getValue;
            var validators = this.validationFuncs && this.validationFuncs(data);
            if (!validators)
                return Promise.resolve();
            var keys = Objects.keys(validators);
            return Promise.all(keys.map(function (key) { return _this.validateField(key); }));
        };
        class_1.prototype.setAsyncError = function (field, err) {
            if (field === void 0) { field = ""; }
            this.setState(function (state) { return ({ asyncErrors: Objects.set(state.asyncErrors, field, err) }); });
        };
        class_1.prototype.hasErrors = function () {
            return Objects.some(this.state.asyncErrors, Boolean);
        };
        class_1.prototype.getChildProps = function () {
            var _this = this;
            return {
                errors: this.state.asyncErrors,
                valid: !this.hasErrors(),
                validating: this.isValidating(),
                isFieldValidating: this.isValidating.bind(this),
                getFieldErrors: this.getErrors.bind(this),
                setFieldErrors: function (field, errors) { return _this.setAsyncError(field, errors); },
                validateField: this.validateField.bind(this),
                validateAll: this.validateAll.bind(this),
                setErrors: function (asyncErrors) { return _this.setState({ asyncErrors: asyncErrors }); },
                onValidate: function (funcs) {
                    _this.validationFuncs = funcs;
                }
            };
        };
        return class_1;
    }(React.Component))
});
//# sourceMappingURL=AsyncValidation.js.map