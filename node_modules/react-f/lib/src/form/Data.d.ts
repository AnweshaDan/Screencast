declare type ChildProps = {
    data: any;
    initialData: any;
    initialize(values: any): void;
    getValue<T = any>(field: string): T;
    getInitialValue<T = any>(field: string): T;
    setValue(value: any): void;
    setValue(field: string, value: any): void;
    updateValue(updater: (currentValue: any) => any): void;
    updateValue(field: string, updater: (currentValue: any) => any): void;
    /**
     * Fires a callback, when a specific field was set by #setValue(field, ... )
     
     * Takes the old field value, the new value and the whole data as arguments.
     * The callback may return a field value or undefined.
     * @param field the field to watch
     * @param callback the callback function.
     * @returns a function, which when called, removes the previously registered fieldchange callback
     */
    onFieldChanged(field: string, callback: (oldValue?: any, newValue?: any, data?: any) => any): () => void;
    /**
     * Fires a callback, when any field was set by #setValue(field, ... )
     *
     * The callback may return a new data state or undefined.
     * @param field the field to watch
     * @param callback the callback function.
     * @returns a function, which when called, removes the previously registered formchange callback
     */
    onFormChanged(callback: (oldState?: any, newState?: any) => any): () => void;
};
declare const _default: import("../HOC").HOCvoid<ChildProps>;
export default _default;
