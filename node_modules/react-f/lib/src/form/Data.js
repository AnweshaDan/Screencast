"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Objects = require("../Objects");
var createHOC_1 = require("../createHOC");
exports.default = createHOC_1.default({
    name: "Form/Dataholder",
    defaultChildProps: {
        data: {},
        initialData: {},
        initialize: function () { return void 0; },
        getValue: function () { return void 0; },
        getInitialValue: function () { return void 0; },
        setValue: function () { return void 0; },
        updateValue: function () { return void 0; },
        onFieldChanged: function () { return function () { return void 0; }; },
        onFormChanged: function () { return function () { return void 0; }; },
    },
    class: /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                data: {},
                initialData: {}
            };
            _this.formChangedCallbacks = [];
            _this.fieldChangeCallbacks = {};
            _this.settingValue = false;
            _this.setValueQueue = new Array();
            _this.mounted = false;
            return _this;
        }
        class_1.prototype.componentWillMount = function () {
            this.mounted = true;
        };
        class_1.prototype.componentWillUnmount = function () {
            this.mounted = false;
        };
        class_1.prototype.getValue = function (field) {
            if (field === undefined || field === null)
                return void console.error("You must provide a valid field argument to method Data#getValue");
            return Objects.get(this.state.data, field);
        };
        class_1.prototype.getInitialValue = function (field) {
            if (field === undefined || field === null)
                return void console.error("You must provide a valid field argument to method Data#getInitialValue");
            return Objects.get(this.state.initialData, field);
        };
        class_1.prototype.setValue = function (arg1, arg2) {
            var _this = this;
            if (!this.mounted)
                return;
            var field = arguments.length > 1 ? arg1 : "";
            var value = arguments.length > 1 ? arg2 : arg1;
            if (field === undefined || field === null)
                return void console.error("You must provide a valid field argument or no field at all to method Data#setValue");
            if (this.settingValue) {
                this.setValueQueue.push(Array.from(arguments));
                return;
            }
            this.settingValue = true;
            this.setState(function (state) {
                var oldState = state;
                var nextState = state;
                var fieldChangeCallbacks = _this.fieldChangeCallbacks[field];
                if (fieldChangeCallbacks && fieldChangeCallbacks.length) {
                    var oldValue = Objects.get(nextState.data, field);
                    var newValue = fieldChangeCallbacks.reduce(function (_a, cb) {
                        var old = _a[0], value = _a[1];
                        var newValue = cb(old, value, state);
                        return typeof newValue === "undefined"
                            ? [old, value]
                            : [value, newValue];
                    }, [oldValue, value])[1];
                    nextState = __assign({}, nextState, { data: Objects.set(state.data, field, newValue) });
                }
                else {
                    nextState = __assign({}, nextState, { data: Objects.set(state.data, field, value) });
                }
                var formChangeCallbacks = _this.formChangedCallbacks;
                if (formChangeCallbacks && formChangeCallbacks.length) {
                    var newData = formChangeCallbacks.reduce(function (_a, cb) {
                        var old = _a[0], value = _a[1];
                        var newValue = cb(old, value);
                        return typeof newValue === "undefined"
                            ? [old, value]
                            : [value, newValue];
                    }, [oldState.data, nextState.data])[1];
                    nextState = __assign({}, nextState, { data: newData });
                }
                return nextState;
            }, function () {
                _this.settingValue = false;
                if (_this.setValueQueue.length) {
                    _this.setValue.apply(_this, _this.setValueQueue.shift());
                }
            });
        };
        class_1.prototype.updateValue = function (arg1, arg2) {
            var field = arguments.length > 1 ? arg1 : "";
            var updater = arguments.length > 1 ? arg2 : arg1;
            if (field === undefined || field === null)
                return void console.error("You must provide a valid field argument or no field at all to method Data#updateValue");
            this.setValue(field, updater(this.getValue(field)));
        };
        class_1.prototype.initialize = function (value) {
            if (!this.mounted)
                return;
            this.setState({
                data: __assign({}, value),
                initialData: __assign({}, value)
            });
        };
        class_1.prototype.onFieldChanged = function (field, callback) {
            var _this = this;
            if (field === undefined || field === null)
                return (console.error("You must provide a valid field argument to method Data#onFieldChanged"), function () { });
            this.fieldChangeCallbacks[field] = (this.fieldChangeCallbacks[field] || []).concat(callback);
            return function () {
                _this.fieldChangeCallbacks[field] = _this.fieldChangeCallbacks[field].filter(function (cb) { return cb !== callback; });
            };
        };
        class_1.prototype.onFormChanged = function (callback) {
            var _this = this;
            this.formChangedCallbacks.push(callback);
            return function () {
                _this.formChangedCallbacks = _this.formChangedCallbacks.filter(function (cb) { return cb !== callback; });
            };
        };
        class_1.prototype.getChildProps = function () {
            return {
                data: this.state.data,
                initialData: this.state.initialData,
                initialize: this.initialize.bind(this),
                getValue: this.getValue.bind(this),
                getInitialValue: this.getInitialValue.bind(this),
                setValue: this.setValue.bind(this),
                updateValue: this.updateValue.bind(this),
                onFieldChanged: this.onFieldChanged.bind(this),
                onFormChanged: this.onFormChanged.bind(this),
            };
        };
        return class_1;
    }(React.Component))
});
//# sourceMappingURL=Data.js.map