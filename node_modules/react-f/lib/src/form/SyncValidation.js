"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Objects = require("../Objects");
var createHOC_1 = require("../createHOC");
var Data_1 = require("./Data");
exports.default = createHOC_1.default({
    name: "Form/SyncValidation",
    contextTypes: Data_1.default.IDs,
    defaultChildProps: {
        errors: {},
        valid: true,
        getFieldErrors: function () { return []; },
        setFieldErrors: function () { return void 0; },
        updateFieldErrors: function () { return void 0; },
        setErrors: function (errors) { return function () { return void 0; }; },
        onValidate: function () { return void 0; }
    },
    class: /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                errors: {}
            };
            _this.callBacks = {};
            return _this;
        }
        class_1.prototype.componentWillReceiveProps = function (newProps, newContext) {
            var newData = (Data_1.default.props(newProps, newContext) || Data_1.default.defaultProps).data;
            var currentData = (Data_1.default.props(this) || Data_1.default.defaultProps).data;
            if (newData !== currentData) {
                this.updateErrors(newData);
            }
        };
        class_1.prototype.getFieldErrors = function (field) {
            if (field === undefined || field === null)
                return void console.error("You must provide a valid field argument to method SyncValidation#getFieldErrors");
            return Array.prototype.concat(Objects.get(this.state.errors, field)).filter(Boolean);
        };
        class_1.prototype.setFieldErrors = function (field, errors) {
            if (field === undefined || field === null)
                return void console.error("You must provide a valid field argument to method SyncValidation#setFieldErrors");
            this.setState(function (state) { return ({
                errors: Objects.set(state.errors, field, errors)
            }); });
        };
        class_1.prototype.updateFieldErrors = function (field, updater) {
            if (field === undefined || field === null)
                return void console.error("You must provide a valid field argument to method SyncValidation#updateFieldErrors");
            this.setState(function (state) { return ({
                errors: Objects.set(state.errors, field, updater(Objects.get(state.errors, field)))
            }); });
        };
        class_1.prototype.updateErrors = function (data) {
            if (data === void 0) { data = Data_1.default.props(this).data; }
            this.setState({
                errors: this.callBacks.validate ? this.callBacks.validate(data) : this.state.errors
            });
        };
        class_1.prototype.isValid = function () {
            return !this.hasErrors();
        };
        class_1.prototype.hasErrors = function () {
            return Objects.some(this.state.errors, Boolean);
        };
        class_1.prototype.getChildProps = function () {
            var _this = this;
            return {
                errors: this.state.errors,
                valid: !this.hasErrors(),
                getFieldErrors: this.getFieldErrors.bind(this),
                setFieldErrors: this.setFieldErrors.bind(this),
                updateFieldErrors: this.updateFieldErrors.bind(this),
                setErrors: function (errors) { return _this.setState({ errors: errors }); },
                onValidate: function (func) {
                    _this.callBacks.validate = func;
                    _this.updateErrors();
                }
            };
        };
        return class_1;
    }(React.Component))
});
//# sourceMappingURL=SyncValidation.js.map