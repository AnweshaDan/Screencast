"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var SyncValidation_1 = require("./SyncValidation");
var AsyncValidation_1 = require("./AsyncValidation");
var createHOC_1 = require("../createHOC");
exports.default = createHOC_1.default({
    name: "Form/Validation",
    wrappers: [SyncValidation_1.default(), AsyncValidation_1.default()],
    defaultChildProps: {
        errors: {},
        valid: true,
        validating: false,
        isFieldValidating: function () { return false; },
        getFieldErrors: function () { return []; },
        setSyncFieldErrors: function () { return void 0; },
        updateSyncFieldErrors: function () { return void 0; },
        clearErrors: function () { return void 0; },
        validateField: function () { return void 0; },
        validateAll: function () { return Promise.resolve(); },
        onValidateSync: function () { return void 0; },
        onValidateAsync: function () { return void 0; }
    },
    class: /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.getChildProps = function () {
            var syncProps = SyncValidation_1.default.props(this);
            var asyncProps = AsyncValidation_1.default.props(this);
            return {
                errors: null,
                valid: syncProps.valid && asyncProps.valid,
                validating: asyncProps.validating,
                isFieldValidating: asyncProps.isFieldValidating,
                getFieldErrors: function (field) { return syncProps.getFieldErrors(field).concat(asyncProps.getFieldErrors(field)); },
                setSyncFieldErrors: syncProps.setFieldErrors,
                updateSyncFieldErrors: syncProps.updateFieldErrors,
                clearErrors: function () { return (syncProps.setErrors({}), asyncProps.setErrors({})); },
                validateField: asyncProps.validateField,
                validateAll: asyncProps.validateAll,
                onValidateSync: syncProps.onValidate,
                onValidateAsync: asyncProps.onValidate,
            };
        };
        return class_1;
    }(React.Component))
});
//# sourceMappingURL=Validation.js.map