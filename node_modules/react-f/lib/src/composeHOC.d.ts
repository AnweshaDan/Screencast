import { HOC } from "./HOC";
/**
 * Creates a HOC by composing two or more existing HOCs
 *
 * Composing two or more HOCs is like applying them sequentially,
 * for @example
 *
 * ```ts
 * // this
 * var NewHOC = composeHOC([MyHOC1, MyHOC2])
 *
 * @NewHOC(o)
 * class DumComponent extends React.Component (...)
 *
 * // is the same like this
 * @MyHOC1(o)
 * @MyHOC2(o)
 * class DumComponent extends React.Component (...)
 *
 * // or like this
 * MyHOC1(
 *   MyHOC2(
 *     class DumComponent extends React.Component (...)
 *   )
 * )
 * ```
 *
 * @param hocs the HOCs to compose
 * @returns a new HOC
 */
export default function composeHOC<T1, T2>(hocs: [HOC<T1>, HOC<T2>]): HOC<T1 & T2>;
export default function composeHOC<T1, T2, T3>(hocs: [HOC<T1>, HOC<T2>, HOC<T3>]): HOC<T1 & T2 & T3>;
export default function composeHOC<T1, T2, T3, T4>(hocs: [HOC<T1>, HOC<T2>, HOC<T3>, HOC<T4>]): HOC<T1 & T2 & T3 & T4>;
export default function composeHOC<T1, T2, T3, T4, T5>(hocs: [HOC<T1>, HOC<T2>, HOC<T3>, HOC<T4>, HOC<T5>]): HOC<T1 & T2 & T3 & T4 & T5>;
export default function composeHOC<T1, T2, T3, T4, T5, T6>(hocs: [HOC<T1>, HOC<T2>, HOC<T3>, HOC<T4>, HOC<T5>, HOC<T6>]): HOC<T1 & T2 & T3 & T4 & T5 & T6>;
export default function composeHOC<T1, T2, T3, T4, T5, T6, T7>(hocs: [HOC<T1>, HOC<T2>, HOC<T3>, HOC<T4>, HOC<T5>, HOC<T6>, HOC<T7>]): HOC<T1 & T2 & T3 & T4 & T5 & T6 & T7>;
export default function composeHOC<T1, T2, T3, T4, T5, T6, T7, T8>(hocs: [HOC<T1>, HOC<T2>, HOC<T3>, HOC<T4>, HOC<T5>, HOC<T6>, HOC<T7>, HOC<T8>]): HOC<T1 & T2 & T3 & T4 & T5 & T6 & T7 & T8>;
