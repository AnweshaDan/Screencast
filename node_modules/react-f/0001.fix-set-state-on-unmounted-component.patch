diff --git a/src/form/Data.tsx b/src/form/Data.tsx
index 7735ab8..e2ea3a7 100644
--- a/src/form/Data.tsx
+++ b/src/form/Data.tsx
@@ -33,6 +33,11 @@ type ChildProps = {
     onFormChanged(callback: (oldState?: any, newState?: any) => any): () => void
 }
 
+type State = {
+    data: any
+    initialData: any
+}
+
 export default createHOC<ChildProps>({
     name: "Form/Dataholder",
     defaultChildProps: {
@@ -46,9 +51,9 @@ export default createHOC<ChildProps>({
         onFieldChanged: () => () => void 0,
         onFormChanged: () => () => void 0,
     },
-    class: class extends React.Component<any, any> {
+    class: class extends React.Component<any, State> {
         
-        readonly state = {
+        readonly state: State = {
             data: {},
             initialData: {}
         }
@@ -61,6 +66,16 @@ export default createHOC<ChildProps>({
         
         private setValueQueue = new Array<object[]>()
 
+        private mounted = false
+
+        componentDidMount() {
+            this.mounted = true
+        }
+
+        componentWillUnmount() {
+            this.mounted = false
+        }
+
         getValue(field: string) {
             if(field === undefined || field === null) return void console.error("You must provide a valid field argument to method Data#getValue")
             return Objects.get(this.state.data, field)
@@ -74,6 +89,8 @@ export default createHOC<ChildProps>({
         setValue(value: any): void
         setValue(field: string, value: any): void
         setValue(arg1: any, arg2?: any) {
+            if (!this.mounted) return
+
             const field = arguments.length > 1 ? arg1 : ""
             const value = arguments.length > 1 ? arg2 : arg1
             if(field === undefined || field === null) return void console.error("You must provide a valid field argument or no field at all to method Data#setValue")
@@ -84,7 +101,7 @@ export default createHOC<ChildProps>({
             }
 
             this.settingValue = true
-            this.setState(state => {
+            this.setState((state: State) => {
                 const oldState = state
                 let nextState = state
                 
@@ -133,6 +150,8 @@ export default createHOC<ChildProps>({
         }
 
         initialize(value: any): void {
+            if (!this.mounted) return
+
             this.setState({
                 data: {...value},
                 initialData: {...value}
diff --git a/src/form/Submitable.tsx b/src/form/Submitable.tsx
index 75f2002..f5d97e4 100644
--- a/src/form/Submitable.tsx
+++ b/src/form/Submitable.tsx
@@ -28,9 +28,9 @@ export default createHOC<ChildProps>({
         readonly state = {
             submitted: false,
             submitting: false,
-            submitFunc: null,
-            beforeSubmitFunc: null,
-            submitFailedFunc: null
+            submitFunc: null as null | Function,
+            beforeSubmitFunc: null as null | Function,
+            submitFailedFunc: null as null | Function,
         }
 
         componentWillMount() {
@@ -71,7 +71,7 @@ export default createHOC<ChildProps>({
                         }
                     }
                     finally {
-                        this.mounted && this.setState(s => ({submitting: false}))
+                        this.mounted && this.setState(() => ({submitting: false}))
                     }
                 }
             }
