{
  "_from": "react-google-login",
  "_id": "react-google-login@5.1.20",
  "_inBundle": false,
  "_integrity": "sha512-/5vDx8Hy7Wo1fO1VC/0e5D6/ZGWgIgvcscI8mYZUQ653QOFf0c4GhTnKkebX5uE7m5rAB/2bzzZIUlIesGqWig==",
  "_location": "/react-google-login",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-google-login",
    "fetchSpec": "latest",
    "name": "react-google-login",
    "raw": "react-google-login",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-google-login/-/react-google-login-5.1.20.tgz",
  "_shasum": "06afbf5fd9013455ae3bfba93054630df203542d",
  "_spec": "react-google-login",
  "_where": "/home/anwesha/Desktop/screencast",
  "author": {
    "email": "anthony@th3legend.com",
    "name": "Anthony Grove"
  },
  "babel": {
    "presets": [
      "@babel/preset-env",
      "@babel/preset-react"
    ]
  },
  "bugs": {
    "url": "https://github.com/anthonyjgrove/react-google-login/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/react": "*",
    "prop-types": "^15.6.0"
  },
  "deprecated": false,
  "description": "A Google Login Component for React",
  "devDependencies": {
    "@babel/core": "^7.4.3",
    "@babel/plugin-proposal-object-rest-spread": "^7.4.3",
    "@babel/plugin-transform-runtime": "^7.4.3",
    "@babel/preset-env": "^7.4.3",
    "@babel/preset-react": "^7.0.0",
    "@storybook/addon-actions": "^5.2.1",
    "@storybook/addon-jest": "^5.2.1",
    "@storybook/addon-knobs": "^5.2.1",
    "@storybook/addon-links": "^5.2.1",
    "@storybook/addon-notes": "^5.2.1",
    "@storybook/addons": "^5.2.1",
    "@storybook/react": "^5.2.1",
    "@storybook/storybook-deployer": "^2.8.1",
    "autoprefixer": "^9.7.1",
    "babel-core": "7.0.0-bridge.0",
    "babel-jest": "^24.7.1",
    "babel-loader": "^8.0.5",
    "babel-plugin-transform-react-constant-elements": "^6.23.0",
    "babel-plugin-transform-react-inline-elements": "^6.22.0",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.24",
    "enzyme": "^3.9.0",
    "enzyme-adapter-react-16": "^1.11.2",
    "eslint-config-ag": "^2.0.0",
    "jest": "^24.7.1",
    "pre-commit": "^1.2.2",
    "react": "^16.0.0",
    "react-dom": "^16.0.0",
    "react-fontawesome": "^1.6.1",
    "react-hot-loader": "^4.8.2",
    "react-test-renderer": "^16.8.6",
    "release-it": "^13.5.5",
    "uglifyjs-webpack-plugin": "^2.1.2",
    "webpack": "^4.29.6",
    "webpack-cli": "^3.3.10",
    "webpack-dev-server": "^3.2.1"
  },
  "homepage": "https://github.com/anthonyjgrove/react-google-login",
  "keywords": [
    "google-login",
    "google-oAuth",
    "google-oAuth2",
    "react",
    "react-component",
    "reactjs"
  ],
  "license": "MIT",
  "main": "dist/google-login.js",
  "name": "react-google-login",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.0.0",
    "react-dom": "^16.0.0"
  },
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# React Google Login\n\n> A Google oAUth Sign-in / Log-in Component for React\n\n## Storybook\n\n[Demo Link](https://anthonyjgrove.github.io/react-google-login/)\n\n## Install\n``` \nnpm install react-google-login\n```\n\n## How to use\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\n// or\nimport { GoogleLogin } from 'react-google-login';\n\n\nconst responseGoogle = (response) => {\n  console.log(response);\n}\n\nReactDOM.render(\n  <GoogleLogin\n    clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n    buttonText=\"Login\"\n    onSuccess={responseGoogle}\n    onFailure={responseGoogle}\n    cookiePolicy={'single_host_origin'}\n  />,\n  document.getElementById('googleButton')\n);\n```\n\n## Google button without styling or custom button\n```js\nReactDOM.render(\n  <GoogleLogin\n    clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n    render={renderProps => (\n      <button onClick={renderProps.onClick} disabled={renderProps.disabled}>This is my custom Google button</button>\n    )}\n    buttonText=\"Login\"\n    onSuccess={responseGoogle}\n    onFailure={responseGoogle}\n    cookiePolicy={'single_host_origin'}\n  />,\n  document.getElementById('googleButton')\n);\n```\n\n## Stay Logged in\n`isSignedIn={true}` attribute will call `onSuccess` callback on load to keep the user signed in.\n```jsx\n<GoogleLogin\n  clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n  onSuccess={responseGoogle}\n  isSignedIn={true}\n/>\n```\n\n## Login Hook\n```js\nimport { useGoogleLogin } from 'react-google-login'\n\nconst { signIn, loaded } = useGoogleLogin({\n    onSuccess,\n    onAutoLoadFinished,\n    clientId,\n    cookiePolicy,\n    loginHint,\n    hostedDomain,\n    autoLoad,\n    isSignedIn,\n    fetchBasicProfile,\n    redirectUri,\n    discoveryDocs,\n    onFailure,\n    uxMode,\n    scope,\n    accessType,\n    responseType,\n    jsSrc,\n    onRequest,\n    prompt\n  })\n```\n## Logout Hook\n```js\nimport { useGoogleLogout } from 'react-google-login'\n\nconst { signOut, loaded } = useGoogleLogout({\n    jsSrc,\n    onFailure,\n    clientId,\n    cookiePolicy,\n    loginHint,\n    hostedDomain,\n    fetchBasicProfile,\n    discoveryDocs,\n    uxMode,\n    redirectUri,\n    scope,\n    accessType,\n    onLogoutSuccess\n  })\n```\n## onSuccess callback\n\nIf responseType is not 'code', callback will return the GoogleAuth object.\n\nIf responseType is 'code', callback will return the offline token for use on your server.\n\nIf you use the hostedDomain param, make sure to validate the id_token (a JSON web token) returned by Google on your backend server:\n 1. In the `responseGoogle(response) {...}` callback function, you should get back a standard JWT located at `response.tokenId` or `res.getAuthResponse().id_token`\n 2. Send this token to your server (preferably as an `Authorization` header)\n 3. Have your server decode the id_token by using a common JWT library such as [jwt-simple](https://github.com/hokaccha/node-jwt-simple) or by sending a GET request to `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=YOUR_TOKEN_HERE`\n 4. The returned decoded token should have an `hd` key equal to the hosted domain you'd like to restrict to.\n\n\n## Logout\nUse GoogleLogout button to logout the user from google.\n\n```js\n    import { GoogleLogout } from 'react-google-login';\n    <GoogleLogout\n      clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n      buttonText=\"Logout\"\n      onLogoutSuccess={logout}\n    >\n    </GoogleLogout>\n  ```\n## Login Props\n\n|    params    |   value  |             default value            |   description    |\n|:------------:|:--------:|:------------------------------------:|:----------------:|\n|    clientId  |  string  |               REQUIRED               | You can create a clientID by creating a [new project on Google developers website.](https://developers.google.com/identity/sign-in/web/sign-in) |\n|    jsSrc     |  string  |                   -                  |                  |\n| hostedDomain |  string  |                   -                  | URL of the Javascript file normally hosted by Google |\n|     scope    |  string  |             profile email            |                  |\n| responseType |  string  |              permission              | Can be either space-delimited 'id_token', to retrieve an ID Token + 'permission' (or 'token'), to retrieve an Access Token, or 'code', to retrieve an Authorization Code.\n| accessType   |  string  |              online                  | Can be either 'online' or 'offline'. Use offline with responseType 'code' to retrieve a refresh token |\n|   onSuccess  | function |               REQUIRED               |                  |\n|   onFailure  | function |               REQUIRED               |                  |\n|   onRequest  | function |                   -                  |                  |\n|   onAutoLoadFinished  | function |                   -         |                  |\n|   buttonText |  string  |             Login with Google        |                  |\n|   className  |  string  |                   -                  |                  |\n|    style     |  object  |                   -                  |                  |\n| disabledStyle|  object  |                   -                  |                  |\n|   loginHint  |  string  |                   -                  |                  |\n|    prompt    |  string  |                   -                  | Can be 'consent' to force google return refresh token.                |\n|     tag      |  string  |                button                |  sets element tag (div, a, span, etc     |\n|     type      |  string  |               button                |sets button type (submit || button)     |\n|   autoLoad   |  boolean |                 false                |                  |\n| fetchBasicProfile | boolean | true                            |                  |\n| disabled | boolean | false                            |                  |\n| discoveryDocs | - | https://developers.google.com/discovery/v1/using |\n| uxMode       |  string  |  popup   | The UX mode to use for the sign-in flow. Valid values are popup and redirect. |\n| theme | string | light | If set to `dark` the button will follow the Google brand guidelines for dark. Otherwise it will default to light (https://developers.google.com/identity/branding-guidelines) |\n| icon | boolean | true | Show (`true`) or hide (`false`) the Google Icon |\n| redirectUri       |  string  |  -   | If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow. The default redirect_uri is the current URL stripped of query parameters and hash fragment. |\n| isSignedIn | boolean | false | If true will return GoogleUser object on load, if user has given your app permission |\n| render       | function | -                                     | Render prop to use a custom element, use renderProps.onClick |\nGoogle Scopes List: [scopes](https://developers.google.com/identity/protocols/googlescopes)\n\n## Logout Props\n\n|    params    |   value  |             default value            |   description    |\n|:------------:|:--------:|:------------------------------------:|:----------------:|\n|    clientId  |  string  |               REQUIRED               | You can create a clientID by creating a [new project on Google developers website.](https://developers.google.com/identity/sign-in/web/sign-in) |\n|    jsSrc     |  string  |                   -                  |                  |\n| hostedDomain |  string  |                   -                  | URL of the Javascript file normally hosted by Google |\n|     scope    |  string  |             profile email            |                  |\n| accessType   |  string  |              online                  | Can be either 'online' or 'offline'. Use offline with responseType 'code' to retrieve a refresh token |\n|   onLogoutSuccess  | function |               REQUIRED               |                  |\n|   onFailure  | function |               REQUIRED               |                  |\n|   buttonText |  string  |             Login with Google        |                  |\n|   className  |  string  |                   -                  |                  |\n| disabledStyle|  object  |                   -                  |                  |\n|   loginHint  |  string  |                   -                  |                  |\n|     tag      |  string  |                button                |  sets element tag (div, a, span, etc     |\n|     type      |  string  |               button                |sets button type (submit || button)     |\n| fetchBasicProfile | boolean | true                            |                  |\n| disabled | boolean | false                            |                  |\n| discoveryDocs | - | https://developers.google.com/discovery/v1/using |\n| uxMode       |  string  |  popup   | The UX mode to use for the sign-in flow. Valid values are popup and redirect. |\n| theme | string | light | If set to `dark` the button will follow the Google brand guidelines for dark. Otherwise it will default to light (https://developers.google.com/identity/branding-guidelines) |\n| icon | boolean | true | Show (`true`) or hide (`false`) the Google Icon |\n| redirectUri       |  string  |  -   | If using ux_mode='redirect', this parameter allows you to override the default redirect_uri that will be used at the end of the consent flow. The default redirect_uri is the current URL stripped of query parameters and hash fragment. |\n| isSignedIn | boolean | false | If true will return GoogleUser object on load, if user has given your app permission |\n| render       | function | -                                     | Render prop to use a custom element, use renderProps.onClick |\nGoogle Scopes List: [scopes](https://developers.google.com/identity/protocols/googlescopes)\n\n## onSuccess callback ( w/ offline false)\n\nonSuccess callback returns a GoogleUser object which provides access\nto all of the GoogleUser methods listed here: https://developers.google.com/identity/sign-in/web/reference#users .\n\nYou can also access the returned values via the following properties on the returned object.\n\n| property name |  value   |             definition               |\n|:-------------:|:--------:|:------------------------------------:|\n|   googleId    |  string  |           Google user ID             |\n|   tokenId     |  string  |              Token Id                |\n|  accessToken  |  string  |            Access Token              |\n|   tokenObj    |  object  |        Token details object          |\n|  profileObj   |  object  |        Profile details object        |\n\n## onSuccess callback ( w/ offline true)\n\n| property name |  value   |             definition               |\n|:-------------:|:--------:|:------------------------------------:|\n|    code       |  object  |           offline token              |\n\nYou can also pass child components such as icons into the button component.\n```js\n  <GoogleLogin\n    clientId={'658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com'}\n    onSuccess={responseGoogle}\n    onFailure={responseGoogle}\n  >\n    <FontAwesome\n      name='google'\n    />\n    <span> Login with Google</span>\n  </GoogleLogin>\n\n```\n\n\n## onFailure callback\n\nonFailure callback is called when either initialization or a signin attempt fails.\n\n| property name |  value   |             definition               |\n|:-------------:|:--------:|:------------------------------------:|\n|   error       |  string  |           Error code                 |\n|   details     |  string  |      Detailed error description      |\n\n\n\nCommon error codes include:\n\n| error code | description |\n|:----------:|:-----------:|\n| `idpiframe_initialization_failed` | initialization of the Google Auth API failed (this will occur if a client doesn't have [third party cookies enabled](https://github.com/google/google-api-javascript-client/issues/260)) |\n| `popup_closed_by_user` | The user closed the popup before finishing the sign in flow.|\n| `access_denied` | The user denied the permission to the scopes required |\n| `immediate_failed` | No user could be automatically selected without prompting the consent flow. |\n\nMore details can be found in the official Google docs:\n * [GoogleAuth.then(onInit, onError)](https://developers.google.com/identity/sign-in/web/reference#googleauththenoninit-onerror)\n * [GoogleAuth.signIn(options)](https://developers.google.com/identity/sign-in/web/reference#googleauthsigninoptions)\n * [GoogleAuth.grantOfflineAccess(options)](https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions)\n\n## Dev Server\n```\nnpm run start\n```\nDefault dev server runs at localost:8080 in browser.\nYou can set IP and PORT in webpack.config.dev.js\n\n## Run Tests\n```\nnpm run test:watch\n```\n\n## Production Bundle\n```\nnpm run bundle\n```\n\n## Deploy Storybook\n```\nnpm run deploy-storybook\n```\n\n##### Checkout my other login: [React Instagram Login](https://github.com/anthonyjgrove/react-instagram-login)\n\n##### Checkout keppelen's [React Facebook Login](https://github.com/keppelen/react-facebook-login)\n\n### Follow me on Twitter: [@anthonyjgrove](https://twitter.com/anthonyjgrove)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anthonyjgrove/react-google-login.git"
  },
  "scripts": {
    "build-storybook": "npm run test:generate-output; build-storybook -c .storybook -o docs",
    "bundle": "webpack --config webpack/webpack.config.prod.js",
    "deploy-storybook": "storybook-to-ghpages --out=docs/",
    "dev": "npm run start",
    "fresh": "rm -rf node_modules dist docs; rm package-lock.json; npm i",
    "lint": "eslint ./src",
    "lint:fix": "eslint ./src --fix",
    "release": "release-it --ci --no-git.requireCleanWorkingDir",
    "start": "webpack-dev-server --config webpack/webpack.config.dev.js",
    "storybook": "start-storybook -p 8080",
    "test": "jest",
    "test:generate-output": "jest --json --outputFile=.jest-test-results.json",
    "test:watch": "jest --watch"
  },
  "types": "./index.d.ts",
  "version": "5.1.20"
}
